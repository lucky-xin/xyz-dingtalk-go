// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: com/pistonint/grpc/svc/v1/dingtalk_svc.proto

package svc

import (
	context "context"
	"github.com/lucky-xin/xyz-common-go/core"
	"github.com/lucky-xin/xyz-dingtalk-go/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DingtalkSvc_Outgoing_FullMethodName    = "/com.pistonint.grpc.svc.dingtalk.DingtalkSvc/outgoing"
	DingtalkSvc_SendMessage_FullMethodName = "/com.pistonint.grpc.svc.dingtalk.DingtalkSvc/sendMessage"
)

// DingtalkSvcClient is the client API for DingtalkSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DingtalkSvcClient interface {
	// outgoing
	Outgoing(ctx context.Context, in *domain.OutgoingReq, opts ...grpc.CallOption) (*domain.OutgoingResp, error)
	// 发送消息到钉钉群
	SendMessage(ctx context.Context, in *domain.MsgExchange, opts ...grpc.CallOption) (*core.Resp, error)
}

type dingtalkSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewDingtalkSvcClient(cc grpc.ClientConnInterface) DingtalkSvcClient {
	return &dingtalkSvcClient{cc}
}

func (c *dingtalkSvcClient) Outgoing(ctx context.Context, in *domain.OutgoingReq, opts ...grpc.CallOption) (*domain.OutgoingResp, error) {
	out := new(domain.OutgoingResp)
	err := c.cc.Invoke(ctx, DingtalkSvc_Outgoing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dingtalkSvcClient) SendMessage(ctx context.Context, in *domain.MsgExchange, opts ...grpc.CallOption) (*core.Resp, error) {
	out := new(core.Resp)
	err := c.cc.Invoke(ctx, DingtalkSvc_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DingtalkSvcServer is the server API for DingtalkSvc service.
// All implementations must embed UnimplementedDingtalkSvcServer
// for forward compatibility
type DingtalkSvcServer interface {
	// outgoing
	Outgoing(context.Context, *domain.OutgoingReq) (*domain.OutgoingResp, error)
	// 发送消息到钉钉群
	SendMessage(context.Context, *domain.MsgExchange) (*core.Resp, error)
	mustEmbedUnimplementedDingtalkSvcServer()
}

// UnimplementedDingtalkSvcServer must be embedded to have forward compatible implementations.
type UnimplementedDingtalkSvcServer struct {
}

func (UnimplementedDingtalkSvcServer) Outgoing(context.Context, *domain.OutgoingReq) (*domain.OutgoingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outgoing not implemented")
}
func (UnimplementedDingtalkSvcServer) SendMessage(context.Context, *domain.MsgExchange) (*core.Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDingtalkSvcServer) mustEmbedUnimplementedDingtalkSvcServer() {}

// UnsafeDingtalkSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DingtalkSvcServer will
// result in compilation errors.
type UnsafeDingtalkSvcServer interface {
	mustEmbedUnimplementedDingtalkSvcServer()
}

func RegisterDingtalkSvcServer(s grpc.ServiceRegistrar, srv DingtalkSvcServer) {
	s.RegisterService(&DingtalkSvc_ServiceDesc, srv)
}

func _DingtalkSvc_Outgoing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.OutgoingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkSvcServer).Outgoing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DingtalkSvc_Outgoing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkSvcServer).Outgoing(ctx, req.(*domain.OutgoingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DingtalkSvc_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.MsgExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkSvcServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DingtalkSvc_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkSvcServer).SendMessage(ctx, req.(*domain.MsgExchange))
	}
	return interceptor(ctx, in, info, handler)
}

// DingtalkSvc_ServiceDesc is the grpc.ServiceDesc for DingtalkSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DingtalkSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.pistonint.grpc.svc.dingtalk.DingtalkSvc",
	HandlerType: (*DingtalkSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "outgoing",
			Handler:    _DingtalkSvc_Outgoing_Handler,
		},
		{
			MethodName: "sendMessage",
			Handler:    _DingtalkSvc_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/pistonint/grpc/svc/v1/dingtalk_svc.proto",
}
