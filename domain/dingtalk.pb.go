// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.3
// source: com/pistonint/grpc/domain/dingtalk/dingtalk.proto

package domain

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息类型
type MsgType int32

const (
	// 文本消息
	MsgType_text MsgType = 0
	// 链接消息
	MsgType_link MsgType = 1
	// markdown文本消息
	MsgType_markdown MsgType = 2
	// feedcard消息
	MsgType_feedCard MsgType = 3
	// ActionCard类型
	MsgType_actionCard MsgType = 4
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "text",
		1: "link",
		2: "markdown",
		3: "feedCard",
		4: "actionCard",
	}
	MsgType_value = map[string]int32{
		"text":       0,
		"link":       1,
		"markdown":   2,
		"feedCard":   3,
		"actionCard": 4,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{0}
}

type MsgExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype MsgType `protobuf:"varint,1,opt,name=msgtype,proto3,enum=com.pistonint.grpc.domain.dingtalk.MsgType" json:"msgtype,omitempty"`
	// AccessToken
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Secret
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// Message
	//
	// Types that are assignable to Msg:
	//
	//	*MsgExchange_TextMsg
	//	*MsgExchange_LinkMsg
	//	*MsgExchange_MarkdownMsg
	//	*MsgExchange_FeedCardMsg
	//	*MsgExchange_ActionCardMsg
	Msg isMsgExchange_Msg `protobuf_oneof:"msg"`
}

func (x *MsgExchange) Reset() {
	*x = MsgExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExchange) ProtoMessage() {}

func (x *MsgExchange) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgExchange.ProtoReflect.Descriptor instead.
func (*MsgExchange) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{0}
}

func (x *MsgExchange) GetMsgtype() MsgType {
	if x != nil {
		return x.Msgtype
	}
	return MsgType_text
}

func (x *MsgExchange) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MsgExchange) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (m *MsgExchange) GetMsg() isMsgExchange_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *MsgExchange) GetTextMsg() *TextMsg {
	if x, ok := x.GetMsg().(*MsgExchange_TextMsg); ok {
		return x.TextMsg
	}
	return nil
}

func (x *MsgExchange) GetLinkMsg() *LinkMsg {
	if x, ok := x.GetMsg().(*MsgExchange_LinkMsg); ok {
		return x.LinkMsg
	}
	return nil
}

func (x *MsgExchange) GetMarkdownMsg() *MarkdownMsg {
	if x, ok := x.GetMsg().(*MsgExchange_MarkdownMsg); ok {
		return x.MarkdownMsg
	}
	return nil
}

func (x *MsgExchange) GetFeedCardMsg() *FeedCardMsg {
	if x, ok := x.GetMsg().(*MsgExchange_FeedCardMsg); ok {
		return x.FeedCardMsg
	}
	return nil
}

func (x *MsgExchange) GetActionCardMsg() *ActionCardMsg {
	if x, ok := x.GetMsg().(*MsgExchange_ActionCardMsg); ok {
		return x.ActionCardMsg
	}
	return nil
}

type isMsgExchange_Msg interface {
	isMsgExchange_Msg()
}

type MsgExchange_TextMsg struct {
	// 文本消息
	TextMsg *TextMsg `protobuf:"bytes,4,opt,name=textMsg,proto3,oneof"`
}

type MsgExchange_LinkMsg struct {
	// 链接消息
	LinkMsg *LinkMsg `protobuf:"bytes,5,opt,name=linkMsg,proto3,oneof"`
}

type MsgExchange_MarkdownMsg struct {
	// markdown文本消息
	MarkdownMsg *MarkdownMsg `protobuf:"bytes,6,opt,name=markdownMsg,proto3,oneof"`
}

type MsgExchange_FeedCardMsg struct {
	// feedcard消息
	FeedCardMsg *FeedCardMsg `protobuf:"bytes,7,opt,name=feedCardMsg,proto3,oneof"`
}

type MsgExchange_ActionCardMsg struct {
	// 独立跳转ActionCard类型
	ActionCardMsg *ActionCardMsg `protobuf:"bytes,8,opt,name=actionCardMsg,proto3,oneof"`
}

func (*MsgExchange_TextMsg) isMsgExchange_Msg() {}

func (*MsgExchange_LinkMsg) isMsgExchange_Msg() {}

func (*MsgExchange_MarkdownMsg) isMsgExchange_Msg() {}

func (*MsgExchange_FeedCardMsg) isMsgExchange_Msg() {}

func (*MsgExchange_ActionCardMsg) isMsgExchange_Msg() {}

// 文本
type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{1}
}

func (x *Text) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 被@的群成员信息
type At struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被@的群成员手机号
	AtMobiles []string `protobuf:"bytes,2,rep,name=atMobiles,proto3" json:"atMobiles,omitempty"`
	// 被@的群成员userId
	AtUserIds []string `protobuf:"bytes,3,rep,name=atUserIds,proto3" json:"atUserIds,omitempty"`
	// 是否@所有人
	IsAtAll bool `protobuf:"varint,4,opt,name=isAtAll,proto3" json:"isAtAll,omitempty"`
}

func (x *At) Reset() {
	*x = At{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*At) ProtoMessage() {}

func (x *At) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use At.ProtoReflect.Descriptor instead.
func (*At) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{2}
}

func (x *At) GetAtMobiles() []string {
	if x != nil {
		return x.AtMobiles
	}
	return nil
}

func (x *At) GetAtUserIds() []string {
	if x != nil {
		return x.AtUserIds
	}
	return nil
}

func (x *At) GetIsAtAll() bool {
	if x != nil {
		return x.IsAtAll
	}
	return false
}

// 文本消息
type TextMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// 消息内容
	Text *Text `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 被@的群成员信息
	At *At `protobuf:"bytes,3,opt,name=at,proto3,oneof" json:"at,omitempty"`
}

func (x *TextMsg) Reset() {
	*x = TextMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMsg) ProtoMessage() {}

func (x *TextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMsg.ProtoReflect.Descriptor instead.
func (*TextMsg) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{3}
}

func (x *TextMsg) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *TextMsg) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextMsg) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// MsgUrl
	MessageUrl string `protobuf:"bytes,3,opt,name=messageUrl,proto3" json:"messageUrl,omitempty"`
	// PicUrl
	PicUrl string `protobuf:"bytes,4,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{4}
}

func (x *Link) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Link) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Link) GetMessageUrl() string {
	if x != nil {
		return x.MessageUrl
	}
	return ""
}

func (x *Link) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

type LinkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// 发送链接信息
	// title: 标题
	// text: 文本内容
	// msgUrl: 链接URL
	// picurl: 图片地址
	Link *Link `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	// 被@的群成员信息
	At *At `protobuf:"bytes,3,opt,name=at,proto3,oneof" json:"at,omitempty"`
}

func (x *LinkMsg) Reset() {
	*x = LinkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkMsg) ProtoMessage() {}

func (x *LinkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkMsg.ProtoReflect.Descriptor instead.
func (*LinkMsg) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{5}
}

func (x *LinkMsg) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *LinkMsg) GetLink() *Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *LinkMsg) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

type Markdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Markdown) Reset() {
	*x = Markdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markdown) ProtoMessage() {}

func (x *Markdown) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markdown.ProtoReflect.Descriptor instead.
func (*Markdown) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{6}
}

func (x *Markdown) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Markdown) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MarkdownMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// 发送Markdown文本
	// title: 标题
	// text: 文本内容
	// atMobiles: 需要@的用户手机号码列表
	// atUserIds: 需要@的用户id列表
	// atAll: 是否需要@全体成员
	Markdown *Markdown `protobuf:"bytes,2,opt,name=markdown,proto3" json:"markdown,omitempty"`
	// 被@的群成员信息
	At *At `protobuf:"bytes,3,opt,name=at,proto3,oneof" json:"at,omitempty"`
}

func (x *MarkdownMsg) Reset() {
	*x = MarkdownMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownMsg) ProtoMessage() {}

func (x *MarkdownMsg) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownMsg.ProtoReflect.Descriptor instead.
func (*MarkdownMsg) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{7}
}

func (x *MarkdownMsg) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *MarkdownMsg) GetMarkdown() *Markdown {
	if x != nil {
		return x.Markdown
	}
	return nil
}

func (x *MarkdownMsg) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

type FeedCardLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// feedCard消息内每条内容的标题。
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// feedCard消息内每条内容上午跳转链接。
	MessageURL string `protobuf:"bytes,2,opt,name=messageURL,proto3" json:"messageURL,omitempty"`
	// feedCard消息内每条内容的图片URL，建议使用上传媒体文件接口获取。
	PicURL string `protobuf:"bytes,3,opt,name=picURL,proto3" json:"picURL,omitempty"`
}

func (x *FeedCardLink) Reset() {
	*x = FeedCardLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedCardLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedCardLink) ProtoMessage() {}

func (x *FeedCardLink) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedCardLink.ProtoReflect.Descriptor instead.
func (*FeedCardLink) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{8}
}

func (x *FeedCardLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeedCardLink) GetMessageURL() string {
	if x != nil {
		return x.MessageURL
	}
	return ""
}

func (x *FeedCardLink) GetPicURL() string {
	if x != nil {
		return x.PicURL
	}
	return ""
}

type FeedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*FeedCardLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *FeedCard) Reset() {
	*x = FeedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedCard) ProtoMessage() {}

func (x *FeedCard) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedCard.ProtoReflect.Descriptor instead.
func (*FeedCard) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{9}
}

func (x *FeedCard) GetLinks() []*FeedCardLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type FeedCardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// 发送feedcard类型消息
	// title:单条信息文本 ["时代的火车向前开1",时代的火车向前开2]
	// messageURL:点击单条信息到跳转链接 ["https://www.dingtalk.com/","https://www.dingtalk.com/"]
	// picURL:单条信息后面图片的URL ["https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png","https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png"]
	FeedCard *FeedCard `protobuf:"bytes,2,opt,name=feedCard,proto3" json:"feedCard,omitempty"`
	// 被@的群成员信息
	At *At `protobuf:"bytes,3,opt,name=at,proto3,oneof" json:"at,omitempty"`
}

func (x *FeedCardMsg) Reset() {
	*x = FeedCardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedCardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedCardMsg) ProtoMessage() {}

func (x *FeedCardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedCardMsg.ProtoReflect.Descriptor instead.
func (*FeedCardMsg) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{10}
}

func (x *FeedCardMsg) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *FeedCardMsg) GetFeedCard() *FeedCard {
	if x != nil {
		return x.FeedCard
	}
	return nil
}

func (x *FeedCardMsg) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

type ActionCardBtns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 按钮上显示的文本。
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 按钮跳转的URL。
	ActionURL string `protobuf:"bytes,2,opt,name=actionURL,proto3" json:"actionURL,omitempty"`
}

func (x *ActionCardBtns) Reset() {
	*x = ActionCardBtns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCardBtns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCardBtns) ProtoMessage() {}

func (x *ActionCardBtns) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCardBtns.ProtoReflect.Descriptor instead.
func (*ActionCardBtns) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{11}
}

func (x *ActionCardBtns) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActionCardBtns) GetActionURL() string {
	if x != nil {
		return x.ActionURL
	}
	return ""
}

// ActionCard类型消息体
type ActionCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// *
	// 是否显示消息发送者头像。
	// 0：正常发消息者头像
	// 1：隐藏发消息者头像
	HideAvatar *string `protobuf:"bytes,3,opt,name=hideAvatar,proto3,oneof" json:"hideAvatar,omitempty"`
	// *
	// 消息内按钮排列方式。
	// 0：按钮竖直排列
	// 1：按钮横向排列
	BtnOrientation *string `protobuf:"bytes,4,opt,name=btnOrientation,proto3,oneof" json:"btnOrientation,omitempty"`
	// *
	// 点击singleTitle按钮触发的URL。
	// 消息内只有一个按钮时，该参数必填。
	SingleURL *string `protobuf:"bytes,5,opt,name=singleURL,proto3,oneof" json:"singleURL,omitempty"`
	// *
	// 单个按钮的方案。(设置此项和singleURL后btns无效。)
	// 消息内只有一个按钮时，该参数必填。
	SingleTitle *string `protobuf:"bytes,6,opt,name=singleTitle,proto3,oneof" json:"singleTitle,omitempty"`
	// 按钮的信息列表。
	Btns []*ActionCardBtns `protobuf:"bytes,7,rep,name=btns,proto3" json:"btns,omitempty"`
}

func (x *ActionCard) Reset() {
	*x = ActionCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCard) ProtoMessage() {}

func (x *ActionCard) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCard.ProtoReflect.Descriptor instead.
func (*ActionCard) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{12}
}

func (x *ActionCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ActionCard) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ActionCard) GetHideAvatar() string {
	if x != nil && x.HideAvatar != nil {
		return *x.HideAvatar
	}
	return ""
}

func (x *ActionCard) GetBtnOrientation() string {
	if x != nil && x.BtnOrientation != nil {
		return *x.BtnOrientation
	}
	return ""
}

func (x *ActionCard) GetSingleURL() string {
	if x != nil && x.SingleURL != nil {
		return *x.SingleURL
	}
	return ""
}

func (x *ActionCard) GetSingleTitle() string {
	if x != nil && x.SingleTitle != nil {
		return *x.SingleTitle
	}
	return ""
}

func (x *ActionCard) GetBtns() []*ActionCardBtns {
	if x != nil {
		return x.Btns
	}
	return nil
}

// 独立跳转ActionCard类型
type ActionCardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// 发送整体卡片
	// title: 首屏会话透出的展示内容。
	// btns:按钮
	// title_child:按钮标题
	// actionURL:点击按钮触发的URL
	// btnOrientation:0：按钮竖直排列  1：按钮横向排列 默认为0
	//
	//text:markdown格式的消息。
	ActionCard *ActionCard `protobuf:"bytes,2,opt,name=actionCard,proto3" json:"actionCard,omitempty"`
	// 被@的群成员信息
	At *At `protobuf:"bytes,3,opt,name=at,proto3,oneof" json:"at,omitempty"`
}

func (x *ActionCardMsg) Reset() {
	*x = ActionCardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCardMsg) ProtoMessage() {}

func (x *ActionCardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCardMsg.ProtoReflect.Descriptor instead.
func (*ActionCardMsg) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{13}
}

func (x *ActionCardMsg) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *ActionCardMsg) GetActionCard() *ActionCard {
	if x != nil {
		return x.ActionCard
	}
	return nil
}

func (x *ActionCardMsg) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

// 钉钉outgoing机器人请求体
type OutgoingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MsgType 目前只支持text
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// Msg 消息文本
	TextMsg *TextMsg `protobuf:"bytes,2,opt,name=textMsg,proto3" json:"textMsg,omitempty"`
	// / MsgId 加密的消息ID
	MsgId string `protobuf:"bytes,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	// CreateAt 消息的时间戳，单位ms
	CreateAt int64 `protobuf:"varint,4,opt,name=createAt,proto3" json:"createAt,omitempty"`
	// ConversationType 1：单聊，2：群聊
	ConversationType int32 `protobuf:"varint,5,opt,name=conversationType,proto3" json:"conversationType,omitempty"`
	// ConversationId 加密的会话ID
	ConversationId string `protobuf:"bytes,6,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	// ConversationTitle 群聊时才有的会话标题,可能为空
	ConversationTitle string `protobuf:"bytes,7,opt,name=conversationTitle,proto3" json:"conversationTitle,omitempty"`
	// SenderId 加密的发送者ID。 说明 使用senderStaffId，作为发送者userid值
	SenderId string `protobuf:"bytes,8,opt,name=senderId,proto3" json:"senderId,omitempty"`
	// SenderNick 发送者昵称
	SenderNick string `protobuf:"bytes,9,opt,name=senderNick,proto3" json:"senderNick,omitempty"`
	// SenderCorpId 企业内部群有的发送者当前群的企业corpId
	SenderCorpId string `protobuf:"bytes,10,opt,name=senderCorpId,proto3" json:"senderCorpId,omitempty"`
	// SessionWebhook 当前会话的Webhook地址
	SessionWebhook string `protobuf:"bytes,11,opt,name=sessionWebhook,proto3" json:"sessionWebhook,omitempty"`
	// SessionWebhookExpiredTime 当前会话的Webhook地址过期时间
	SessionWebhookExpiredTime int64 `protobuf:"varint,12,opt,name=sessionWebhookExpiredTime,proto3" json:"sessionWebhookExpiredTime,omitempty"`
	// IsAdmin 是否为管理员说明 机器人发布上线后生效。
	IsAdmin bool `protobuf:"varint,13,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	// ChatbotCorpId 加密的机器人所在的企业corpId
	ChatbotCorpId string `protobuf:"bytes,14,opt,name=chatbotCorpId,proto3" json:"chatbotCorpId,omitempty"`
	// IsInAtList 是否在@列表中
	IsInAtList bool `protobuf:"varint,15,opt,name=isInAtList,proto3" json:"isInAtList,omitempty"`
	// SenderStaffId 企业内部群中@该机器人的成员userid。说明 该字段在机器人发布线上版本后，才会返回。
	SenderStaffId string `protobuf:"bytes,16,opt,name=senderStaffId,proto3" json:"senderStaffId,omitempty"`
	// ChatbotUserId 加密的机器人ID。
	ChatbotUserId string `protobuf:"bytes,17,opt,name=chatbotUserId,proto3" json:"chatbotUserId,omitempty"`
	// AtUsers 被@人的信息
	AtUsers []*AtUsers `protobuf:"bytes,18,rep,name=atUsers,proto3" json:"atUsers,omitempty"`
}

func (x *OutgoingReq) Reset() {
	*x = OutgoingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingReq) ProtoMessage() {}

func (x *OutgoingReq) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingReq.ProtoReflect.Descriptor instead.
func (*OutgoingReq) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{14}
}

func (x *OutgoingReq) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *OutgoingReq) GetTextMsg() *TextMsg {
	if x != nil {
		return x.TextMsg
	}
	return nil
}

func (x *OutgoingReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *OutgoingReq) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *OutgoingReq) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

func (x *OutgoingReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *OutgoingReq) GetConversationTitle() string {
	if x != nil {
		return x.ConversationTitle
	}
	return ""
}

func (x *OutgoingReq) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *OutgoingReq) GetSenderNick() string {
	if x != nil {
		return x.SenderNick
	}
	return ""
}

func (x *OutgoingReq) GetSenderCorpId() string {
	if x != nil {
		return x.SenderCorpId
	}
	return ""
}

func (x *OutgoingReq) GetSessionWebhook() string {
	if x != nil {
		return x.SessionWebhook
	}
	return ""
}

func (x *OutgoingReq) GetSessionWebhookExpiredTime() int64 {
	if x != nil {
		return x.SessionWebhookExpiredTime
	}
	return 0
}

func (x *OutgoingReq) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *OutgoingReq) GetChatbotCorpId() string {
	if x != nil {
		return x.ChatbotCorpId
	}
	return ""
}

func (x *OutgoingReq) GetIsInAtList() bool {
	if x != nil {
		return x.IsInAtList
	}
	return false
}

func (x *OutgoingReq) GetSenderStaffId() string {
	if x != nil {
		return x.SenderStaffId
	}
	return ""
}

func (x *OutgoingReq) GetChatbotUserId() string {
	if x != nil {
		return x.ChatbotUserId
	}
	return ""
}

func (x *OutgoingReq) GetAtUsers() []*AtUsers {
	if x != nil {
		return x.AtUsers
	}
	return nil
}

type AtUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DingtalkId 加密的发送者ID。
	DingtalkId string `protobuf:"bytes,1,opt,name=dingtalkId,proto3" json:"dingtalkId,omitempty"`
	// StaffId 当前企业内部群中员工userid值
	StaffId string `protobuf:"bytes,2,opt,name=staffId,proto3" json:"staffId,omitempty"`
}

func (x *AtUsers) Reset() {
	*x = AtUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtUsers) ProtoMessage() {}

func (x *AtUsers) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtUsers.ProtoReflect.Descriptor instead.
func (*AtUsers) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{15}
}

func (x *AtUsers) GetDingtalkId() string {
	if x != nil {
		return x.DingtalkId
	}
	return ""
}

func (x *AtUsers) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

// 钉钉outgoing机器人响应体
type OutgoingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MsgType 目前只支持text
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	// Text 消息文本
	Text *Text `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Link 消息文本
	Link *Link `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// Markdown 消息文本
	Markdown *Markdown `protobuf:"bytes,4,opt,name=markdown,proto3" json:"markdown,omitempty"`
	// ActionCard 消息文本
	ActionCard *ActionCard `protobuf:"bytes,5,opt,name=actionCard,proto3" json:"actionCard,omitempty"`
	// At @用户
	At *At `protobuf:"bytes,6,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *OutgoingResp) Reset() {
	*x = OutgoingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingResp) ProtoMessage() {}

func (x *OutgoingResp) ProtoReflect() protoreflect.Message {
	mi := &file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingResp.ProtoReflect.Descriptor instead.
func (*OutgoingResp) Descriptor() ([]byte, []int) {
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP(), []int{16}
}

func (x *OutgoingResp) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *OutgoingResp) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *OutgoingResp) GetLink() *Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *OutgoingResp) GetMarkdown() *Markdown {
	if x != nil {
		return x.Markdown
	}
	return nil
}

func (x *OutgoingResp) GetActionCard() *ActionCard {
	if x != nil {
		return x.ActionCard
	}
	return nil
}

func (x *OutgoingResp) GetAt() *At {
	if x != nil {
		return x.At
	}
	return nil
}

var File_com_pistonint_grpc_domain_dingtalk_dingtalk_proto protoreflect.FileDescriptor

var file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69,
	0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x73,
	0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x04,
	0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x6e,
	0x6b, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x66, 0x65, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x59,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74,
	0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x20, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x02, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0xa5,
	0x01, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69,
	0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x74, 0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x61, 0x74, 0x22, 0x68, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x55,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c,
	0x22, 0xa5, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e,
	0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x74, 0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x61, 0x74, 0x22, 0x34, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb5,
	0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x3b, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x74, 0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x61, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x69, 0x63, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69,
	0x63, 0x55, 0x52, 0x4c, 0x22, 0x52, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x46, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x02,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x74,
	0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x61, 0x74,
	0x22, 0x44, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x74,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x23, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x62, 0x74, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e,
	0x62, 0x74, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x52,
	0x4c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x04, 0x62,
	0x74, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x74, 0x6e, 0x73, 0x52, 0x04, 0x62,
	0x74, 0x6e, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x74, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x55, 0x52, 0x4c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x3b, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x41, 0x74, 0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x61, 0x74, 0x22, 0xdb, 0x05, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x74, 0x65, 0x78,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x72, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x41, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x41, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x07, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x43, 0x0a, 0x07, 0x41, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x48, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x74, 0x52, 0x02, 0x61, 0x74, 0x2a,
	0x49, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x10, 0x04, 0x42, 0x53, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x42, 0x0d, 0x44, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x6c, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x70, 0x69, 0x73, 0x74,
	0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x64, 0x69, 0x6e,
	0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescOnce sync.Once
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescData = file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDesc
)

func file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescGZIP() []byte {
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescOnce.Do(func() {
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescData)
	})
	return file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDescData
}

var file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_goTypes = []interface{}{
	(MsgType)(0),           // 0: com.pistonint.grpc.domain.dingtalk.MsgType
	(*MsgExchange)(nil),    // 1: com.pistonint.grpc.domain.dingtalk.MsgExchange
	(*Text)(nil),           // 2: com.pistonint.grpc.domain.dingtalk.Text
	(*At)(nil),             // 3: com.pistonint.grpc.domain.dingtalk.At
	(*TextMsg)(nil),        // 4: com.pistonint.grpc.domain.dingtalk.TextMsg
	(*Link)(nil),           // 5: com.pistonint.grpc.domain.dingtalk.Link
	(*LinkMsg)(nil),        // 6: com.pistonint.grpc.domain.dingtalk.LinkMsg
	(*Markdown)(nil),       // 7: com.pistonint.grpc.domain.dingtalk.Markdown
	(*MarkdownMsg)(nil),    // 8: com.pistonint.grpc.domain.dingtalk.MarkdownMsg
	(*FeedCardLink)(nil),   // 9: com.pistonint.grpc.domain.dingtalk.FeedCardLink
	(*FeedCard)(nil),       // 10: com.pistonint.grpc.domain.dingtalk.FeedCard
	(*FeedCardMsg)(nil),    // 11: com.pistonint.grpc.domain.dingtalk.FeedCardMsg
	(*ActionCardBtns)(nil), // 12: com.pistonint.grpc.domain.dingtalk.ActionCardBtns
	(*ActionCard)(nil),     // 13: com.pistonint.grpc.domain.dingtalk.ActionCard
	(*ActionCardMsg)(nil),  // 14: com.pistonint.grpc.domain.dingtalk.ActionCardMsg
	(*OutgoingReq)(nil),    // 15: com.pistonint.grpc.domain.dingtalk.OutgoingReq
	(*AtUsers)(nil),        // 16: com.pistonint.grpc.domain.dingtalk.AtUsers
	(*OutgoingResp)(nil),   // 17: com.pistonint.grpc.domain.dingtalk.OutgoingResp
}
var file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_depIdxs = []int32{
	0,  // 0: com.pistonint.grpc.domain.dingtalk.MsgExchange.msgtype:type_name -> com.pistonint.grpc.domain.dingtalk.MsgType
	4,  // 1: com.pistonint.grpc.domain.dingtalk.MsgExchange.textMsg:type_name -> com.pistonint.grpc.domain.dingtalk.TextMsg
	6,  // 2: com.pistonint.grpc.domain.dingtalk.MsgExchange.linkMsg:type_name -> com.pistonint.grpc.domain.dingtalk.LinkMsg
	8,  // 3: com.pistonint.grpc.domain.dingtalk.MsgExchange.markdownMsg:type_name -> com.pistonint.grpc.domain.dingtalk.MarkdownMsg
	11, // 4: com.pistonint.grpc.domain.dingtalk.MsgExchange.feedCardMsg:type_name -> com.pistonint.grpc.domain.dingtalk.FeedCardMsg
	14, // 5: com.pistonint.grpc.domain.dingtalk.MsgExchange.actionCardMsg:type_name -> com.pistonint.grpc.domain.dingtalk.ActionCardMsg
	2,  // 6: com.pistonint.grpc.domain.dingtalk.TextMsg.text:type_name -> com.pistonint.grpc.domain.dingtalk.Text
	3,  // 7: com.pistonint.grpc.domain.dingtalk.TextMsg.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	5,  // 8: com.pistonint.grpc.domain.dingtalk.LinkMsg.link:type_name -> com.pistonint.grpc.domain.dingtalk.Link
	3,  // 9: com.pistonint.grpc.domain.dingtalk.LinkMsg.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	7,  // 10: com.pistonint.grpc.domain.dingtalk.MarkdownMsg.markdown:type_name -> com.pistonint.grpc.domain.dingtalk.Markdown
	3,  // 11: com.pistonint.grpc.domain.dingtalk.MarkdownMsg.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	9,  // 12: com.pistonint.grpc.domain.dingtalk.FeedCard.links:type_name -> com.pistonint.grpc.domain.dingtalk.FeedCardLink
	10, // 13: com.pistonint.grpc.domain.dingtalk.FeedCardMsg.feedCard:type_name -> com.pistonint.grpc.domain.dingtalk.FeedCard
	3,  // 14: com.pistonint.grpc.domain.dingtalk.FeedCardMsg.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	12, // 15: com.pistonint.grpc.domain.dingtalk.ActionCard.btns:type_name -> com.pistonint.grpc.domain.dingtalk.ActionCardBtns
	13, // 16: com.pistonint.grpc.domain.dingtalk.ActionCardMsg.actionCard:type_name -> com.pistonint.grpc.domain.dingtalk.ActionCard
	3,  // 17: com.pistonint.grpc.domain.dingtalk.ActionCardMsg.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	4,  // 18: com.pistonint.grpc.domain.dingtalk.OutgoingReq.textMsg:type_name -> com.pistonint.grpc.domain.dingtalk.TextMsg
	16, // 19: com.pistonint.grpc.domain.dingtalk.OutgoingReq.atUsers:type_name -> com.pistonint.grpc.domain.dingtalk.AtUsers
	2,  // 20: com.pistonint.grpc.domain.dingtalk.OutgoingResp.text:type_name -> com.pistonint.grpc.domain.dingtalk.Text
	5,  // 21: com.pistonint.grpc.domain.dingtalk.OutgoingResp.link:type_name -> com.pistonint.grpc.domain.dingtalk.Link
	7,  // 22: com.pistonint.grpc.domain.dingtalk.OutgoingResp.markdown:type_name -> com.pistonint.grpc.domain.dingtalk.Markdown
	13, // 23: com.pistonint.grpc.domain.dingtalk.OutgoingResp.actionCard:type_name -> com.pistonint.grpc.domain.dingtalk.ActionCard
	3,  // 24: com.pistonint.grpc.domain.dingtalk.OutgoingResp.at:type_name -> com.pistonint.grpc.domain.dingtalk.At
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_init() }
func file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_init() {
	if File_com_pistonint_grpc_domain_dingtalk_dingtalk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*At); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedCardLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedCardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCardBtns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MsgExchange_TextMsg)(nil),
		(*MsgExchange_LinkMsg)(nil),
		(*MsgExchange_MarkdownMsg)(nil),
		(*MsgExchange_FeedCardMsg)(nil),
		(*MsgExchange_ActionCardMsg)(nil),
	}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_goTypes,
		DependencyIndexes: file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_depIdxs,
		EnumInfos:         file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_enumTypes,
		MessageInfos:      file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_msgTypes,
	}.Build()
	File_com_pistonint_grpc_domain_dingtalk_dingtalk_proto = out.File
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_rawDesc = nil
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_goTypes = nil
	file_com_pistonint_grpc_domain_dingtalk_dingtalk_proto_depIdxs = nil
}
